#!/bin/bash

## usage
#

usage() {
    cat << EOM
SYNOPSIS
    annict auth
        make authorization

    annict calendar
        your calendar (unwatch list)

    annict watch [<title (search query)>]
        mark a episord as watched

    annict GET /v1/me/statuses
    annict POST /v1/me/programs
        GET/POST the endpoint.
        the phrase "access_token=\$TOKEN" will be appended.

EOM
    exit 0
}

## config & init
#

BASE=https://api.annict.com
CLIENT_ID=c81a73774111f942acf663d9204debe76cf07a15aca8745d9feff62276291e52
CLIENT_SECRET=29a6e737db75badbb1a8b1867ef265ab18d2e2e406182c9dbc1981ce851a4669
[ -d ~/.annict ] || mkdir ~/.annict
[ -d ~/.annict/cache ] || mkdir ~/.annict/cache

## utils
#

browser-open() {
    if which firefox >/dev/null; then
        firefox "$1"
    else
        open -a 'Google Chrome' "$1"
    fi
}

hash() {
    if which md5 >/dev/null; then
        echo "$1" | md5
    else
        echo "$1" | md5sum | grep -o '[0-9a-z]*'
    fi
}

get-token() {
    jq -r .access_token ~/.annict/auth.json
}

auth() {
    REDIRECT_URI="urn:ietf:wg:oauth:2.0:oob"
    browser-open "$BASE/oauth/authorize?client_id=$CLIENT_ID&response_type=code&redirect_uri=$REDIRECT_URI&scope=read%20write"
    echo -n "paste auth code> "
    read CODE

    curl -X POST \
        -F "client_id=$CLIENT_ID" \
        -F "client_secret=$CLIENT_SECRET" \
        -F "grant_type=authorization_code" \
        -F "redirect_uri=$REDIRECT_URI" \
        -F "code=$CODE" \
        "$BASE/oauth/token" > ~/.annict/auth.json
}

record() {

    EPISODE_ID="$1"

    if [ $# -eq 2 ]; then
        COMMENT="$2"
    else
        COMMENT=$(date "+%Y-%m-%dT%H:%M")
    fi

    TOKEN=$(get-token)

    curl -X POST "$BASE/v1/me/records?episode_id=$EPISODE_ID&comment=$COMMENT&access_token=$TOKEN&share_twitter=true"
}

# search work_id from title-query
search_work() {

    TITLE=$1
    CACHE="$HOME/.annict/cache/work_$(hash "$TITLE")"

    if [ ! -f "$CACHE" ]; then
        TOKEN=$(get-token)
        curl -s -X GET "$BASE/v1/works?fields=id,title&per_page=50&filter_title=$TITLE&access_token=$TOKEN" |
        jq -r '.works[] | "\(.id)\t\(.title)"' |
        sort -n > "$CACHE"
    fi

    cat "$CACHE"
}

# search episode_id from work_id
search_episode() {

    ID=$1
    CACHE="$HOME/.annict/cache/episode_$ID"

    if [ ! -f "$CACHE" ]; then
        TOKEN=$(get-token)
        curl -s -X GET "$BASE/v1/episodes?fields=id,title,number_text,sort_number,work&per_page=50&filter_work_id=$ID&access_token=$TOKEN" |
        jq -r '.episodes[] | "\(.sort_number)\t\(.id)\t\(.number_text)\t\(.title)"' |
        sort -n -k 1,1 | sed 's/^[0-9]*[ \t]//g' > "$CACHE"
    fi

    cat "$CACHE"
}

get-query() {

    HISTORY=~/.annict/history

    if [ $# -eq 0 -o "_$1" = "_" ]; then
        if [ -f $HISTORY ]; then
            QUERY=$(peco --prompt "title (search query)>" "$HISTORY")
        else
            echo "search query required"
            usage
        fi
    else
        ( echo "$1"; cat "$HISTORY" ) | uniq | head -n 100 > /tmp/a
        mv /tmp/a $HISTORY
        QUERY="$1"
    fi

    if [ "_$QUERY" == "_" ]; then
        echo "search query required"
        usage
    fi

    echo "$QUERY"
}

watch() {
    QUERY=$(get-query "$1")
    WORK_ID=$(search_work "$QUERY" | peco --prompt "work>" | awk '{print $1}')
    EPISODE_INFO=$(search_episode "$WORK_ID" | peco --prompt "episode>")
    EPISODE_ID=$(echo "$EPISODE_INFO" | awk '{print $1}')
    EPISODE_TITLE=$(echo "$EPISODE_INFO" | awk '{print $3}')
    record "$EPISODE_ID" "$EPISODE_TITLE"
}

request() {
    METHOD="$1"
    URI="$BASE/$2"
    TOKEN=$(get-token)

    case "$URI" in
        *\?* )
            URI="$URI&access_token=$TOKEN"
            ;;
        * )
            URI="$URI?access_token=$TOKEN"
            ;;
    esac

    curl -s -X "$METHOD" "$URI"
}

utc2jst() {
    case $(uname) in
        Darwin )
            date -v+9H -f "%Y-%m-%dT%H:%M:%S" -j "${1%.*}" "+%Y-%m-%dT%H:%M"
            ;;
        * )
            date --date "$1" "+%Y-%m-%dT%H:%M"
            ;;
    esac
}

date-yesterday() {
    case $(uname) in
        Darwin )
            date -v -1d "+%Y-%m-%d"
            ;;
        * )
            date --date yesterday "+%Y-%m-%d"
            ;;
    esac
}

calendar() {
    IFS=$(printf '\t')
    TOKEN=$(get-token)
    YESTERDAY=$(date-yesterday)
    request GET "/v1/me/programs?filter_started_at_gt=$YESTERDAY" |
    jq -r '.programs[] | "\(.id)\t\(.started_at)\t\(.channel.name)\t\(.work.title)\t\(.episode.number_text)"' |
    while read ID START CHANNEL TITLE NUMBER; do
        printf "%s\t%s\t%s\t%s\t%s\n" \
            "$ID" \
            "$(utc2jst "$START")" \
            "$CHANNEL" \
            "$TITLE" \
            "$NUMBER"
    done |
    sort -k 2,2
}

## entry
#

[ $# -eq 0 ] && usage

case "$1" in
    -h | --help )
        usage
        ;;
    auth )
        auth
        ;;
    cal | calendar )
        calendar
        ;;
    w | watch )
        watch "$2"
        ;;
    GET | POST )
        request "$@"
        ;;
    * )
        echo "unknown subcommand: $1"
        echo
        usage
esac
